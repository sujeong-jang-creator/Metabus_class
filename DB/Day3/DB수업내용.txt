USE WORLD;

-- 문제1) EMP 테이블에서 scott의 사원번호, 성명, 담당업무(소문자로), 부서번호를 출력하여라.
SELECT EMPNO AS 사원번호, 
         ENAME AS 성명, 
         LOWER(JOB) AS 담당업무, 
         DEPTNO AS 부서번호
FROM EMP
WHERE ENAME='SCOTT';
 

-- 문제2) EMP 테이블에서 scott의 사원번호, 성명, 담당업무, 부서번호를 출력하여라.
SELECT EMPNO AS 사원번호, ENAME AS 성명, JOB AS 담당업무, DEPTNO AS 부서번호
FROM EMP
WHERE ENAME='SCOTT';
 

-- 문제3) DEPT 테이블에서 컬럼의 첫 글자들만 대문자로 변화하여 모든 정보를 출력하여라.
SELECT DEPTNO,
          CONCAT(UPPER(LEFT(DNAME, 1)),LOWER(SUBSTR(DNAME, 2))) AS DEPTNO,
          CONCAT(UPPER(LEFT(LOC, 1)),LOWER(SUBSTR(LOC, 2))) AS LOC
FROM DEPT;

select deptno,CONCAT(UPPER(LEFT(dname,1)),
        substring(lower(dname),2)),
        CONCAT(UPPER(LEFT(loc,1)),
        substring(lower(loc),2)) from dept;
 

-- 문제4) EMP 테이블에서 이름의 첫글자가 'K'보고 크고 'Y'보다 작은 사원의 사원번호, 이름, 업무, 급여, 부서번호를 출력하여라.
SELECT EMPNO AS 사원번호,
          ENAME AS 이름,
          JOB AS 업무,
          SAL AS 급여,
          DEPTNO AS 부서번호
FROM EMP
WHERE LEFT(ENAME, 1) > 'K' AND LEFT(ENAME, 1) < 'Y';

 
select ename , job , sal , DEPTNO
from emp
where substr(ename  , 1 ,1 ) > 'k' and substr(ename  , 1 ,1 ) < 'y';

-- 문제5) EMP 테이블에서 부서가 20번인 사원의 사원번호, 이름, 이름의 자릿수, 급여, 급여의 자릿수를 출력하여라.
SELECT EMPNO AS 사원번호,
          ENAME AS 이름,
          LENGTH(ENAME) AS 이름의자릿수,
          SAL AS 급여,
          LENGTH(SAL) AS 급여의자릿수
FROM EMP;

select ename ,  CHAR_LENGTH(ename) , sal , char_length(sal)
from emp
where deptno = 20;
 

-- 문제6) EMP 테이블에서 이름 중 'L'자의 위치를 출력하여라.
SELECT ENAME AS 이름,
	INSTR(ENAME, 'L') AS L의위치
FROM EMP;

 

-- L 들어가는 애들만
SELECT ENAME AS 이름,
	INSTR(ENAME, 'L') AS L의위치
FROM EMP
WHERE INSTR(ENAME, 'L') != 0;

 

-- 문제7) EMP 테이블에서 10번 부서의 사원에 대하여 담당 업무 중 좌측에 'A'를 삭제하고 급여 중 좌측의 1을 삭제하여 출력하여라.
SELECT TRIM(LEADING 'A' FROM JOB) AS A삭제, DEPTNO, 
          TRIM(LEADING 1 FROM SAL) AS 1삭제
FROM EMP
WHERE DEPTNO = 10;

 

-- 문제8) EMP 테이블에서 10번 부서의 사원에 대하여 담당 업무 중 우측에 'T'를 삭제하고 급여 중 우측의 0을 삭제하여 출력하여라.
SELECT TRIM(TRAILING 'T' FROM JOB) AS T삭제, DEPTNO, 
          TRIM(TRAILING 0 FROM SAL) AS 0삭제
FROM EMP
WHERE DEPTNO = 10;

 

-- 문제9) EMP 테이블에서 성명을 소문자로 바꾸어 출력하여라.
SELECT LOWER(ENAME)
FROM EMP;

 

-- 문제10) EMP 테이블에서 JOB에 'A'를 '$'로 바꾸어 출력하여라.
SELECT REPLACE(JOB, 'A', '$')
FROM EMP;

 

-- 문제11) EMP 테이블에서 급여를 30으로 나눈 나머지를 구하여 출력하여라.
SELECT SAL%30 AS 30으로나눈_나머지
FROM EMP;

select sal , mod(sal , 30)
from emp;
 

-- 문제12) EMP 테이블에서 현재까지의 근무일수가 몇 주 몇 일인가를 출력하여라.  단, 근무일수가 많은 사람순으로 출력하여라.
-- TIMESTAMPDIFF(DAY, DATE(HIREDATE), CURRENT_DATE()) - TIMESTAMPDIFF(WEEK, DATE(HIREDATE), CURRENT_DATE()) * 7
SELECT ENAME, 
         DATE(HIREDATE) AS HIREDATE, 
         TIMESTAMPDIFF(WEEK, DATE(HIREDATE), CURRENT_DATE()) AS 몇주,
         TIMESTAMPDIFF(DAY, DATE(HIREDATE), CURRENT_DATE()) AS 몇일
FROM EMP
ORDER BY 몇일 DESC;


SELECT ENAME, 
          DATE(HIREDATE) AS HIREDATE, 
          TIMESTAMPDIFF(WEEK, DATE(HIREDATE), CURRENT_DATE()) AS 몇주,
          TIMESTAMPDIFF(DAY, DATE(HIREDATE), CURRENT_DATE()) - TIMESTAMPDIFF(WEEK, DATE(HIREDATE), CURRENT_DATE()) * 7 AS 뺸일,
    TIMESTAMPDIFF(DAY, DATE(HIREDATE), CURRENT_DATE()) AS 몇일
FROM EMP
ORDER BY 몇일 DESC;
 

-- 문제13) EMP 테이블에서 10번 부서원이 현재까지의 근무 월수를 계산하여 출력하여라.
SELECT DEPTNO, ENAME,
	TIMESTAMPDIFF(MONTH, DATE(HIREDATE), CURRENT_DATE()) AS 근무월수
FROM EMP
WHERE DEPTNO = 10;
 

-- 문제14) EMP 테이블에서 10번 부서원의 입사 일자로부터 5개월이 지난 후 날짜를 계산하여 출력하여라.
SELECT DEPTNO, ENAME, DATE(HIREDATE), 
          DATE(DATE_ADD(HIREDATE, INTERVAL 5 MONTH)) AS 5개월후
FROM EMP;


-- 문제15) EMP 테이블에서 10번 부서원의 입사 일자로부터 돌아오는 금요일을 계산하여 출력하여라.
SELECT  DEPTNO, ENAME, DATE(HIREDATE) AS 입사일, 
           CASE DAYOFWEEK(HIREDATE)	WHEN 0 THEN '토'
			             WHEN 1 THEN '일'
				WHEN 2 THEN '월'
				WHEN 3 THEN '화'
				WHEN 4 THEN '수'
				WHEN 5 THEN '목'
				WHEN 6 THEN '금'
           END AS 요일, 
          DATE(DATE_ADD(HIREDATE, INTERVAL 6-DAYOFWEEK(HIREDATE) DAY)) AS 돌아오는금요일
FROM EMP
WHERE DEPTNO = 10;

select ename ,next(date(HIREDATE),'friday')
from emp
where deptno = 10 ;

SELECT hiredate, NEXT_DAY(hiredate, 6)
FROM   emp
WHERE  deptno=10;

-- 문제16) EMP 테이블에서 입사한 달의 근무 일수를 계산하여 출력하여라. 단, 토요일과 일요일도 근무일수에 포함한다.
SELECT DEPTNO, ENAME,
	TIMESTAMPDIFF(DAY, DATE(HIREDATE), CURRENT_DATE()) AS 근무일수
FROM EMP
ORDER BY DEPTNO ASC;

 SELECT?DEPTNO AS 부서번호,ENAME AS 이름,
           LAST_DAY(HIREDATE) - HIREDATE AS "입사한 달 근무 일수"
FROM EMP;

-- 문제17) EMP 테이블에서 10번 부서 중 입사한 달의 ROUND과 TRUNCATE 함수를 비교합니다.
SELECT DEPTNO, ENAME,
	TIMESTAMPDIFF(MONTH, DATE(HIREDATE), CURRENT_DATE()) AS 근무달수,
	ROUND(TIMESTAMPDIFF(MONTH, DATE(HIREDATE), CURRENT_DATE()), -1) AS 근무달수반올림,
    TRUNCATE(TIMESTAMPDIFF(MONTH, DATE(HIREDATE), CURRENT_DATE()), -1) AS 근무달수버림
FROM EMP;

select round(hiredate,0), truncate(hiredate,0) from emp  where deptno=10;

###########################################################################
sql 함수 특성 : 
리턴값이 반드시 하나
계산, format변경, 형변환, 조건처리 등 수행

형변환 - cast(), convert()
select cast(now() as signed);
select convert(now() , signed);
select cast(20220610 as date);
select convert(20220610 , date);

cast(), convert()함수에서 지정할 수 있는 데이터 타입 :
binary, char, date, datetime, decimal, json, nchar, signed(integer), time, unsigned

단일행함수
복수행함수

Quiz> 그룹함수는 null을  함수 연산에 포함한다 (X)
Quiz> select count(null), sum(null), min(null), max(null) 결과값?


join : 
2개 이상의 참조관계 테이블로부터 (parent.pk컬럼=child.fk컬럼) 조건으로 레코드 결합 , 검색 결과 반환
equi join : (inner) join ~ on 조인조건,  where parent.pk컬럼=child.fk컬럼
non equi join :  (inner) join ~ on 조인조건,  where 조인조건
self join : pk컬럼를 참조하는 fk컬럼이 동일한 테이블에 존재하는 경우 가능
outer join : inner join 조인 결과 누락되는 레코드 (조인컬럼값이 null인 레코드)를 조인 결과로 반환하도록 할때  left outer join, right outer join,  (left outer join union right outer join,)
cross join (cartesian product)

Quiz> n개의 테이블을 조인할 경우 최소 조인조건의 개수? n-1개

Quiz> 출력결과, 반환할 레코드 개수를 제한 할때 사용할 절 ? limit  (start offset), (rows)

테이블의 레코드를 특정 컬럼기준으로 그룹핑할때 선언 절 :  group by절

select deptno, avg(sal)
from emp;  --mysql에서 실행됨, 결과는 논리적 오류, oracle db에서는 에러

select deptno, avg(sal)
from emp
group by deptno;

그룹핑 수행 후 결과에 대한 filter조건 선언 절 : having

select ..표현식...       --5          
from                     --1
where                   --2
group by               --3
having                  --4
order by                --6
limit                     --7


subquery :  조건값을 위해 추가 검색을 수행해야 하는 경우 하나의 select문 내부에 정의하는 select문으로 1번 먼저 수행

select ~
from ~
where 컬럼 연산자 (select ~           ---subquery, nested query, inner query, --먼저 1번 수행
                         from  ~ 
                         where  ~)
subquery에서 사용할 수 있는 구문 제한은 없음(DB에 따라서 order by절 제외)
subquery 선언 가능한 위치 :
select절, from절, where절,  having절, order by절

single row subquery  : single row operator
multiple row subquery : multiple row operator    in, any, all
scalar subquery
multiple column subquery
co-related subquery


####################################################################
문> EMP 테이블에서 부서별 최소급여가 20번 부서의 최소 급여보다 많은 부서를 조회하라  
SELECT deptno, min(sal)
FROM emp
GROUP BY deptno
HAVING min(sal) > (SELECT min(sal) 
                         FROM emp
	            WHERE deptno = 20)

문> 업무가 SALESMAN인 최소 한 명 이상의 사원보다 급여를 많이 받는 사원의 이름, 급여, 업무를 조회하라 (subquery를 사용해서)
SELECT ename, sal ,job
 FROM emp
 WHERE job != 'SALESMAN'
 AND sal >any (SELECT sal FROM emp  
 	        WHERE job='SALESMAN');


문>  업무가 SALESMAN인 모든 사원보다 급여를 많이 받는 사원의 이름, 급여, 업무, 입사일, 부서번호를 조회하라
SELECT ename, sal ,job
 FROM emp
 WHERE job != 'SALESMAN'
 AND sal >all (SELECT sal FROM emp  
 	        WHERE job='SALESMAN');


문> FORD와 BLAKE 사원의 관리자 및 부서가 같은(동일한)  사원의 정보 조회 
(단 , FORD, BLAKE 사원정보는 결과에서 제외)
SELECT ename, mgr, deptno
 FROM EMP
 WHERE (mgr IN (SELECT mgr FROM EMP
 	        WHERE ename IN ('FORD', 'BLAKE'))
 or deptno IN (SELECT deptno FROM EMP
 	          WHERE ename IN ('FORD', 'BLAKE')) )
 AND ename NOT IN ('FORD', 'BLAKE');  

#Co-related subquery : 상관관계 subquery
select column1, column2, ...
from table main
where column1 operator ( select colum1
                                  from table2 sub
                                  where sub1.expression1 = main.expression1)
1. 후보 행을  가져온다(메인쿼리에서 인출한다)
2.  후보 행의 값을 사용하여 서브쿼리를 실행한다
3. 서브쿼리의 결과값을 사용하여 후보 행의 조건을 확인한다 (main query 수행)
4.  메인 쿼리의 후보 행수 만큼 이 남지 않을 때까지 반복한다
메인(바깥쪽) 쿼리의   ROW수만큼  서브쿼리가 반복 실행된다. 

main query의 각 후보 행에 대해 서브쿼리가 다른 결과를 반환해야 하는 경우에 사용된다.
서브쿼리에서 메인 쿼리의 컬럼명을 사용할 수 있으나, 메인 쿼리에서는 서브쿼리의 컬럼명을 사용할 수없다

문>소속 부서의 평균 급여보다 많은 급여를 받는 사원의 이름, 급여, 부서번호, 입사일, 업무 정보를 조회하는 SQL 문이다.  (join과 subquery)
SELECT ename, sal, deptno, hiredate,job
 FROM EMP E
 WHERE sal  > (SELECT AVG(sal)
                    FROM EMP
                      WHERE deptno = E.deptno  );

SELECT e.ename, e.sal, e.deptno, e.hiredate, e.job
from EMP E ,   (SELECT deptno ,  AVG(sal) avg_sal
                    FROM EMP
                    group by  deptno) e2         --from절의 subquery는 inline view
WHERE e.sal > e2.avg_sal
and e.deptno = e2.deptno;


inline view는 SQL문이 실행될 때만 임시적으로 생성되는 동적인 뷰이기 때문에 데이터베이스에 해당 정보가 저장되지 않는다
일반적인 뷰를 정적 뷰(Static View)라고 하고 인라인 뷰를 동적 뷰(Dynamic View)라고도 한다.


문> join 사용하지 않고 subquery로  사원들의 소속부서번호와 소속 부서이름을 사원번호, 이름과 함께 출력
select empno, ename, deptno,  (select dname from dept where a.deptno = deptno)  dname
from emp a;


문> 사원번호와 이름, 사원의 부서 위치가 DALLAS이면 TOP 출력하고 
      부서 위치가 DALLAS가 아니면 BRENCH로 출력하시오
select ename, empno, (case when deptno = (select deptno from dept
                                                         where loc = 'DALLAS') 
                                    then 'TOP'
                                    else 'BRENCH' end) as location
from emp;


문> 사원이름, 부서번호, 급여, 소속부서의 평균연봉을 함께 출력
SELECT ename, deptno, sal,
           (SELECT AVG(sal) FROM EMP WHERE deptno = e.deptno) AS asal
 FROM EMP e; 
 --select절에 scalar subquery 사용
 

문> 사원이름, 부서번호, 급여, 소속부서를 부서이름으로 오름차순 정렬해서 출력
SELECT empno, ename, deptno, hiredate
 FROM EMP e
 ORDER BY ( SELECT dname
 	    FROM DEPT
 	    WHERE deptno = e.deptno) desc ;

문> 관리자인 사원들만 조회
select empno, ename
from emp
where empno in (select mgr
                       from emp);  

select empno, ename
from emp m
where exists (select 'X'
                 from emp
                 where m.empno = mgr);  

문> 관리자가 아닌 일반 사원들만 조회
select empno, ename
from emp
where empno  not in (select mgr
                             from emp
                             where mgr is not null);

select empno, ename
from emp m
where  not exists (select 'X'
                       from emp
                       where m.empno = mgr); 



select ~
from  ~
where ~
union (distinct)
select  ~
from ~
where ~ ; 각 select의 결과 집합을 합친다 (중복된 row는 제거)

select ~
from  ~
where ~
union all
select  ~
from ~
where ~ ; 

select deptno, dname
from dept
union all
select empno, ename
from emp;

문>  전체 사원들의 급여 평균과
       부서별 사원들의 급여 평균과 
       부서와 직무별 그룹핑한 사원들의 급여 평균을 단일 결과 집합으로 출력

select deptno, job, avg(sal)
from emp
group by deptno, job 
union all
select deptno,  avg(sal)
from emp
group by deptno 
union all
select   avg(sal)
from emp;--error

select deptno, job, avg(sal)
from emp
group by deptno, job 
union all
select deptno,  null,  avg(sal)
from emp
group by deptno 
union all
select  null, ' ',   avg(sal)
from emp;

select deptno, job, avg(sal)
from emp
group by  deptno, job with rollup;

#########################################################################
DML : 데이터 추가, 수정, 삭제
INSERT 문을 이용한 테이블에 새로운 행을 추가

insert into 테이블 [(컬럼명, 컬럼명, ...)]
values (컬럼타입과 개수를 일치해야 함) [, (컬럼타입과 개수를 일치해야 함) , ...] ; 
----not null, primary key 제약조건이 선언된 컬럼은 반드시 포함해야 합니다.

insert into 테이블명
values (테이블에 선언된 컬럼순서대로 모든 값이 선언);

values절에 단일행 함수, null 등 사용 가능

table에 대한 dml 규칙 : 제약조건

문> 70번부서, marketing, 'seoul' 데이터 추가
INSERT INTO dept VALUES (70, 'MARKETING','seoul' ) ;
또는
INSERT INTO dept (deptno, dname, loc)
 VALUES (70, 'MARKETING','seoul' ) ; 

select * from dept;
문> 60번 부서, MIS 부서명 새 레코드 추가
INSERT INTO dept (deptno, dname)
values (60, 'MIS');
또는 
INSERT INTO dept
values (60, 'MIS', null);
select * from dept;

문> 6000, 'Kim', 입사날짜 오늘  새 레코드 추가
insert into emp (empno, ename, hiredate)
values (6000, 'Kim', now());
select * from emp;


insert 수행시 오류 :
컬럼 size 초과
필수 컬럼(not null) 생략하고 insert할 수 없음

insert into emp (empno, ename, deptno)
values (7001, 'Lee', 50);   -->


create table test (name varchar(10),
                      address varchar(50) default 'seoul');
desc test
select * from test;


insert into test (name) values ('kim');
insert into test values ('lee', 'inchon');
insert into test values ('park', null);
insert into test values ('song', default);
select * from test;

drop table test;
show tables;

CREATE TABLE new_emp (
 id int  ,
 name varchar(10) ) ;

 INSERT INTO new_emp  
 SELECT empno , ename FROM emp
 WHERE ename like '%A%';

select * from new_emp;

update :  컬럼값들을 수정
update 테이블 set 컬럼명 = 변경값, .......; 
update 테이블 set 컬럼명 = 변경값, ....... where 조건 ; 
#WHERE 절을 생략하면 테이블의 모든 행이 수정된다.
#한번에 여러 열을 수정할 경우 SET절에 콤마(,)로 구분하여 변경할 열 이름 = 값 형태로 나열한다. 
#WHERE 절을 지정하면 UPDATE 문은 해당 조건을 만족하는 행만 수정작업을 수행한다

select empno, ename, sal
from emp;

update emp
set sal = 0;

select * from emp;

rollback;

select * from emp;

show table status like 'emp';  -- InnoDB

#InnoDB의 특징
트랜젝션 지원
쓰기, 수정, 삭제시 처리 능력
디스크, 전원 등의 장애 발생시 복구 성능
동시처리가 많은 환경에 적합
Row 단위 락킹 

#MyISAM의 특징
상대적으로 높은 성능
읽기 위주의 요청에 유리
테이블 단위 락킹

Mysql은 기본적으로 auto commit 이 적용
민감한 데이터를 트랜잭션 처리할 때 임시저장 기능을 사용

select * from emp;
delete from emp;
select * from emp;

INSERT INTO EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES
(7369, 'SMITH', 'CLERK', 7902, '1980-12-17 00:00:00', 800, NULL, 20),
(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20 00:00:00', 1600, 300, 30),
(7521, 'WARD', 'SALESMAN', 7698, '1981-02-22 00:00:00', 1250, 500, 30),
(7566, 'JONES', 'MANAGER', 7839, '1981-04-02 00:00:00', 2975, NULL, 20),
(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28 00:00:00', 1250, 1400, 30),
(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01 00:00:00', 2850, NULL, 30),
(7782, 'CLARK', 'MANAGER', 7839, '1981-06-09 00:00:00', 2450, NULL, 10),
(7788, 'SCOTT', 'ANALYST', 7566, '1987-04-19 00:00:00', 3000, NULL, 20),
(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17 00:00:00', 5000, NULL, 10),
(7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08 00:00:00', 1500, 0, 30),
(7876, 'ADAMS', 'CLERK', 7788, '1987-05-23 00:00:00', 1100, NULL, 20),
(7900, 'JAMES', 'CLERK', 7698, '1981-12-03 00:00:00', 950, NULL, 30),
(7902, 'FORD', 'ANALYST', 7566, '1981-12-03 00:00:00', 3000, NULL, 20),
(7934, 'MILLER', 'CLERK', 7782, '1982-01-23 00:00:00', 1300, NULL, 10);

select * from emp;


START TRANSACTION;
update emp
set sal = 0;

select * from emp;
rollback;
select * from emp;


문> 짝수 사번의 사원들의 급여를 10%인상 변경하시오
START TRANSACTION;
update emp
set sal = sal*1.1
where  mod(empno, 2) = 0; 

select * from emp;
rollback;
select * from emp;

update 실행 시 오류 :
PK 제약조건 오류
FK 제약조건 오류, 참조 무결성 제약조건 오류
컬럼타입 불일치 또는 컬럼size 초과하는 경우 

문> DALLAS 위치의 부서에 근무하는 사원의 입사날짜를 현재 날짜로 변경하시오 (emp)
START TRANSACTION;

update emp
set hiredate = now()
where deptno = (select deptno
                        from dept
                        where loc = 'DALLAS');

select deptno, hiredate from emp;




[delete - 레코드 단위 삭제 ]
delete from 테이블명;  --전체 행이 삭제
delete from 테이블명 where 조건 ;   --조건을 만족하는 행만 삭제

START TRANSACTION;
delete from emp ; 
select * from emp ;

rollback;
select * from emp;

문> 급여가 3000이상인 사원 레코드 삭제
START TRANSACTION;
delete from emp where sal>=3000 ; 
select * from emp ;

rollback;
select * from emp;

문> SCOTT 사원과 동일한 부서번호의 사원들을 모두 삭제하시오
START TRANSACTION;
delete from emp where deptno = (select deptno from emp where ename = 'SCOTT'); 
--mysql 에서는 상호배제 원칙 때문에 오류 (oracle db는 가능)
select * from emp ;

rollback;
select * from emp;


CREATE DATABASE testDB;  --admin권한이 필요함
SHOW DATABASES;

DROP DATABASE testDB; --admin권한이 필요함
SHOW DATABASES;

create table 테이블 (
컬럼명 컬럼타입(size)  [제약조건],
....
);

제약조건은 컬럼레벨에서 선언, 
테이블레벨에서 선언 (2개 이상의 컬럼값에 대해 제약조건 선언하거나, 하나의 컬럼에 추가 제약조건 선언 할때 )

CTAS  : create table as 
테이블 구조와 데이터 모두 복제, 구조만 복제, 테이블 일부 복제


drop table if exists emp_new;

create table emp20
as select *
   from emp
   where deptno=20;

desc emp20   ;
select * from emp20;  

create table emp_new
as select *
   from emp    ; 
desc emp_new   ;
select * from emp_new;  

drop table if exists emp_new;
create table emp_new
as select *
   from emp
  where 1=2    ;   --where조건이 false이므로 데이터없이 구조만 복제

desc emp_new   ;
select * from emp_new;  


/*제약조건 */
#not null는 반드시 값이 존재해야 함 (테이블에 데이터 추가될때 반드시 값이 존재해야 함)
create table copy_emp (
empno  int(4)     not null,
ename  varchar(15) not null,
age    int(3) ,
email   varchar(30)
);

#제약조건 조회
select * from information_schema.table_constraints;  --primary key, unique, foreign key제약조건 조회

insert into copy_emp 
values (2001, null, 30, 'kim@korea.com');   --error

insert into copy_emp (age, email)
values (29, 'Song@gmail.com');   --error

alter table 테이블명 drop constraint 제약조건이름;
 alter table 테이블명 drop foreign key 제약조건이름;
 alter table 테이블명 add constraint  [제약조건이름] 제약조건타입(컬럼);
제약조건은 테이블에 종속적인 객체이므로 테이블이 삭제되면 함께 삭제됨

#primary key => not null+unique
# 테이블당 최대 1개의 PK 제약조건만 선언 가능
# PK는 두개이상의 컬럼값을 결합해서 제약조건을 선언 가능

drop table if exists copy_emp;

create table copy_emp (
empno  int(4)    primary key,
ename  varchar(15) ,
age    int(3) ,
email   varchar(30)
);
 
select * from information_schema.table_constraints
where table_name = 'copy_emp';

# PK 제약조건이 선언된 컬럼값에 대해서 자동(dbms가 생성해줌)으로  인덱스가 생성됩니다.

show index from copy_emp;


insert into copy_emp (ename, age, email)
values ('Song', 29, 'Song@gmail.com');   --error?

insert into copy_emp 
values (2001, null, 30, 'kim@korea.com');   

insert into copy_emp  
values (2001, 'Song', 29, 'Song@gmail.com');  --error?

#unique 제약조건 - 중복 허용하지 않음, null은 허용 
drop table copy_emp;
show index from copy_emp;   #테이블이 삭제되면 종속객체 index 삭제 

create table copy_emp (
empno  int(4)    unique,
ename  varchar(15) ,
age    int(3) ,
email   varchar(30)
);

select * from information_schema.table_constraints
where table_name = 'copy_emp';

show index from copy_emp;
# unique 제약조건이 선언된 컬럼값에 대해서 자동(dbms가 생성해줌)으로  인덱스가 생성됩니다.

insert into copy_emp (ename, age, email)
values ('Song', 29, 'Song@gmail.com');  

insert into copy_emp (ename, age, email)
values ('Park', 29, 'Park@gmail.com'); 

select * from copy_emp;

SET UNIQUE_CHECKS=0;     --unique 제약조건 비활성화

#테이블에 선언된 키 조회
show keys from 테이블이름;
show keys from copy_emp;

alter table copy_emp disable keys;

check 제약조건은 컬럼값의 범위에 대한 제약조건
create table userinfo(
userid  varchar(10),
username  varchar(15),
gender   char(1)    check  (gender in ('F', 'M')),
age  int(2) check (age > 0 and age < 100)
);

insert into userinfo  values ('a001', 'an', null, 20); --?
insert into userinfo  values ('a001', 'an', 'f', 20);  
insert into userinfo  values ('a002', 'choi', 'M', 25); 
insert into userinfo  values ('a002', 'choi', 'M', 0); --error

# foreign key : 참조하는 테이블의 primary key, unique 제약조건이 선언된 컬럼을 참조
참조 테이블의 컬럼에 존재하는 값으로만 insert, update 가능
참조되고 있는 row를 참조하는 자식row가 존재하면, 삭제 불가

create table category (
 code  int(4),
 name  varchar(20)
);

insert into category values (1000, 'Music');
insert into category values (2000, 'Book');
insert into category values (3000, 'Game');
insert into category values (4000, 'Movie');

select * from category;

create table book (
 isbn   int(10) primary key,
 title  varchar(100),
 author varchar(50),
 price int(6),
 code   int(4) ,
 constraint book_fk foreign key (code)  references category(code) );  --error

alter table category add constraint category_pk primary key (code);

create table book (
 isbn   int(10) primary key,
 title  varchar(100),
 author varchar(50),
 price int(6),
 code   int(4) ,
 constraint book_fk foreign key (code)  references category(code) ); 

 show keys from book;

insert into book values (1, 'oracle', 'hufs', 10000, 2000);  
insert into book values (2, 'packman', 'hufs', 3000, 5000); --error
insert into book values (3, 'with God', 'hufs', 11000, null);  ---?

update book set code = 2001    
where isbn = 3;    --error
delete from category where code = 2000;  --error
delete from category where code = 3000;  


alter table book  drop foreign key  book_fk ;
alter table book add constraint book_fk foreign key  (code) references category(code) on update cascade;

# alter table 테이블명 add column 컬럼명 컬럼타입 제약조건;
# alter table 테이블명 modify column 컬럼명 컬럼타입 제약조건;  --컬럼타입, size,  not null 제약조건 변경
#  alter table 테이블명 change column  old컬럼명  new컬럼명컬럼타입 제약조건;  --컬럼타입, size,  not null 제약조건 변경, 컬럼명까지 변경 가능
# alter table old테이블명 rename new테이블명;
# alter table 테이블명 drop column 컬럼명 ;

drop table 테이블명;  #테이블 구조와 레코드를 모두 삭제, 백업받아놓은 파일을 이용해서 복구 가능

truncate table 테이블명;  #레코드를 모두 삭제, 테이블 구조는 남아 있음 (drop 후 create하므로 auto_increment가 선언된 컬럼이 다시 초기화되어 1부터 시작됨)

view  : table에 대한 window 역할 , 논리적 table
         select문이 definition
          보안, 간결한 sql문 처리

index : select 검색 속도를 향상시켜 주는 객체
         컬럼값에 대해서 생성
         balanced tree구조 , 컬럼값이 오름차순으로 정렬되어 저장됨

