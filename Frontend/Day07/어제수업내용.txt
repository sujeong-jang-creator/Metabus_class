memory
file, 
Database :
database management system(DBMS)

Database 운영목적
OLTP : 트랜잭션 처리 목적 
OLAP, DSS, DW, DataMart : 데이터 마이닝, 의사결정을 위한 (분석) 정보, 지식, 추출

트랜잭션 : 분리되어 수행될 수 없는 논리적 작업 단위 (Unit of Work)
예) 계좌이체 ,  온라인 쇼핑 처리

모든 ORDBMS는 메모리와 프로세스 구조가 다름 , 물리적 저장소 구조와 물리적 DATA 저장 형식도 다름
모든 ORDBMS는 데이터를 저장하는 논리적 구조는 유사 : 데이터 저장 기본 객체는 Table
Table은 속성인 column들로 구성되며, column값들로 구성된 Row(Record, Tuple)들로 구성

Modeling 용어           Database 용어
-----------------------------------------------
Entity                       Table
Attribute                   Column
EntityInstance(Tuple)    Row, Record

주식별자키 : primary key (not null + unique)
데이터의 참조관계 : parent의 primary key 참조하는 child의 key(primary key 값이 동일) => foreign key

SQL(structured query language) : 구조적 질의 언어, 모든 ORDBMS에서 사용하고, 표준을 만들어가는 ANSI
1987, 1992, 1999
DML : select, insert, update, delete, merge
DDL : create, alter, truncate, drop
DCL : (권한) grant, revoke
TCL : commit, rollback, savepoint

DB 관리자 명령어 


###########################################################
schema :  논리적으로 연관된 객체들의 그룹을 다른 객체 그룹과 구분하기 위해 사용하는 namespace역할
 (create schema~, create database~, create user~)
information_schema : 테이블, 컬럼, 인덱스, 컬럼타입, 접근권한 등의 메타정보가 저장된 DB (시스템 카탈로그, 데이터 딕셔너리) 메타정보가 저장된 DB
읽기 전용, 수정 불가
mysql : mysql서버 운영에 필요한 정보가 저장된 DB(권한관리, 이벤트,  사용자정의기능, 플러그인, 프로시저 등)
performance_schema : 실행중인 여러 작업을 모니터링, 수집된 통계등이 저장, DB 진단에 사용됨
sys : DB user정보,  host정보, session정보, 쿼리 실행 정보  (mysql db내에 작업들의 실행 이력)가 저장됨


sql : 결과를 기술(선언적 언어)
프로그래밍 언어 : 과정 기술(절차적 언어)

database 생성 권한 or  database access 권한 
table 생성 권한 or table access권한 (select, insert, update, delete 권한

테이블명 또는 컬럼명 naming 규칙 :
DB => 소문자 권장 ,  중복 허용 X , 키워드 X (root, sys)
table =>영문자, _, 숫자허용, 중복 허용 X , 키워드 X

컬럼타입 :  
숫자 타입  - bit, int(integer), tinyint, smallint, mediumint, bigint, float, double, real, decimal, number
문자 타입 (고정길이 문자열, 가변길이 문자열  ) - char, varchar, binary, text(tinytext, text, mediumtext, longtext), CLOB , BLOB(tinyblob, blob, mediumblob, longblob),
날짜 시간타입 - date, time,  datetime, timestamp, year, 
위치정보 저장타입 - geometry
json타입

--한줄 주석
제약조건 constraint : 테이블에 DML 수행시에 체크하는 컬럼값 규칙 (not null, primary key, check, unique, foreign key)

use world;
create table if not exists dept (
   deptno  int(11)  not null,
   dname  varchar(14)  default null,
   loc  varchar(13) default null,
   primary key (deptno)
) engine=innodb default charset=utf8;

describe dept   --dept테이블 구조 확인

insert into dept (deptno, dname, loc) 
values (10, 'ACCOUNTING', 'NEW YORK'), 
(20, 'RESEARCH', 'DALLAS'), 
(30, 'SALES', 'CHICAGO'), 
(40, 'OPERATIONS', 'BOSTON');
--oracle db는 insert into ~ values구문으로는 1row만 추가
--mysql, ms sql server, ..db에서는  insert into ~ values구문으로는 m rows 추가 가능

commit;   --영속성 부여 (db구성 file에 저장)

select * from dept;

CREATE TABLE  if not exists  EMP (
 EMPNO     int(11)    not null, 
 ENAME     VARCHAR(10)   default null,
 JOB         VARCHAR(9)   default null,
 MGR        int(11)   default null,
 HIREDATE datetime   default null,
 SAL         double   default null,
 COMM    double   default null,
 DEPTNO  int(11)    default null,
  primary key  (EMPNO )   
) engine=innodb  default  charset=utf8;


INSERT INTO EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES
(7369, 'SMITH', 'CLERK', 7902, '1980-12-17 00:00:00', 800, NULL, 20),
(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20 00:00:00', 1600, 300, 30),
(7521, 'WARD', 'SALESMAN', 7698, '1981-02-22 00:00:00', 1250, 500, 30),
(7566, 'JONES', 'MANAGER', 7839, '1981-04-02 00:00:00', 2975, NULL, 20),
(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28 00:00:00', 1250, 1400, 30),
(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01 00:00:00', 2850, NULL, 30),
(7782, 'CLARK', 'MANAGER', 7839, '1981-06-09 00:00:00', 2450, NULL, 10),
(7788, 'SCOTT', 'ANALYST', 7566, '1987-04-19 00:00:00', 3000, NULL, 20),
(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17 00:00:00', 5000, NULL, 10),
(7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08 00:00:00', 1500, 0, 30),
(7876, 'ADAMS', 'CLERK', 7788, '1987-05-23 00:00:00', 1100, NULL, 20),
(7900, 'JAMES', 'CLERK', 7698, '1981-12-03 00:00:00', 950, NULL, 30),
(7902, 'FORD', 'ANALYST', 7566, '1981-12-03 00:00:00', 3000, NULL, 20),
(7934, 'MILLER', 'CLERK', 7782, '1982-01-23 00:00:00', 1300, NULL, 10);

commit;


alter table EMP  
add constraint FK_EMP FOREIGN KEY (DEPTNO) 
REFERENCES DEPT (DEPTNO)
ON DELETE SET NULL ON UPDATE CASCADE;


CREATE TABLE IF NOT EXISTS SALGRADE (
  GRADE double DEFAULT NULL,
  LOSAL double DEFAULT NULL,
  HISAL double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


INSERT INTO SALGRADE (GRADE, LOSAL, HISAL) VALUES
(1, 700, 1200),
(2, 1201, 1400),
(3, 1401, 2000),
(4, 2001, 3000),
(5, 3001, 9999);

commit;


select * from emp;
select * from dept;
select * from salgrade;

sql 키워드 : 대소문자 구별 안함
sql 키워드는 테이블명, 컬럼명, user명, db명 , schema명등으로 사용불가
# 컬럼값은 대소문자 구별함
# mysql은  user명 대소문자 구별함
# 테이블명, 컬럼명, schema명 , db명 ,대소문자 구별안함



table로부터 데이터 검색 종류 :
projection : 1개의 target table로부터 column기준 검색
selection :  1개의 target table로부터 row기준 검색
join : 2개 이상의 table로부터 공통 속성(column)값이 일치할때 table의 row를 결합, 검색 결과 가져옴
###############################################################################
#데이터 검색 - projection 검색 select 문법
select  *  | [distinct] 컬럼명, ..... | 표현식
from target table이름 ;

select * from emp;
select sal, ename, deptno, job
from emp;   -- select절에 선언된 컬럼은 테이블에 선언된(저장된) 컬럼순서와 일치하지 않아도 됨
# /* ~~~~~~~~~~~~ */  여러 줄 주석

select  deptno 
from emp;

select  distinct deptno 
from emp;

select  deptno , distinct  job
from emp;  --error

select  distinct deptno , job
from emp;

--distinct는 모든 컬럼선언의 가장 앞에만 올 수 있습니다.

select ename, sal, sal*12, sal+100
from emp;
--표현식에 사용되는 연산자 : +, -, *, /,    ||(결합)


select  concat(ename, sal)
from emp;  --결합되면 문자열변환

select concat(concat( ename , ' works as a '), job)  
from emp; 

# 컬럼 별칭 alias : Query결과의 컬럼이름 heading을 rename 해줍니다.
# as 는 생략가능하며
select concat(concat( ename , ' works as a '), job) as title
from emp;

select concat(concat( ename , ' works as a '), job)  title
from emp;

#별칭에 특수문자가 포함되거나 공백이 포함되거나, 대소문자를 구별하려면 " "으로 묶어줍니다.
select concat(concat( ename , ' works as a '), job)  "Title"
from emp;

select ename, sal, comm
from emp;
---컬럼값이 존재하지 않는 경우 null이라고 합니다.
--null은 알 수 없는 값으로서 0 또는 공백(' ')과 다름
----null은 비교연산, 산술연산, 논리연산 결과 모두 null입니다.

select ename, sal, comm, sal+comm
from emp;

#################################################################
데이터 검색 selection 
select ~
from ~ ;   --oracle db에서는 필수절

select ~ ; --mysql, ms-sql server 필수절

select 검색결과로 가져올 컬럼들
from 조회대상 테이블명
[ where 조건]  -- 컬럼 비교연산자 비교값
>, >=, <, <=, <>, !=, ^=

문> EMP 테이블에서 담당업무가 MANAGER인 사원의 정보를 사원번호, 성명, 담당업무, 급여를 조회한다.
select empno, ename, job, sal
from emp
where  job = 'manager';    

select empno, ename, job, sal
from emp
where  job = 'Manager';   

select empno, ename, job, sal
from emp
where  job = 'MANAGER'; 

문>  EMP 테이블에서 급여가 3000 이상인 사원의 사원번호, 이름, 담당업무, 급여를 조회
SELECT empno, ename, job, sal
 FROM emp
 WHERE sal >= 3000;

문>  EMP 테이블에서 30번 부서가 아닌 사원들만 이름, 급여, 부서번호 조회한다.
SELECT ename, sal, deptno
FROM emp 
WHERE deptno != 30 ; 
--WHERE deptno <> 30 ; 

문> EMP 테이블에서 급여가 1300에서 1700 사이에 해당되는 사원의 성명, 담당업무, 급여,부서 번호를 조회한다.
--논리연산자(not ,and, or) :  조건1 and 조건2, 조건1 or 조건2,  조건1 and not 조건2
SELECT ename, job, sal, deptno
FROM emp
WHERE sal >= 1300 and sal<=1700;
--컬럼 between 하한값 and 상한값  : 하한값 포함하고 상한값 포함됨 (범위 연산자)
SELECT ename, job, sal, deptno
FROM emp
WHERE sal between 1300 and 1700;

문>EMP 테이블에서 사원번호가 7902, 7788, 7566인 사원의 사원번호, 성명, 담당업무, 급여, 입사일자를 조회한다.
SELECT empno, ename, job, sal, hiredate
FROM emp
 WHERE empno =7902    or empno =  7788    or empno =  7566 ;

SELECT empno, ename, job, sal, hiredate
FROM emp
 WHERE empno IN (7902, 7788, 7566);  --- in list연산자

-- 문자열 컬럼 , 패턴 
-- 컬럼 like ' '  (_만능문자는 1개의 문자, 숫자, 특수문자가 올수 있다는 의미,
                    %만능문자는 0개 이상 여러개의 문자, 숫자, 특수문자가 올수 있다는 의미)
문> EMP 테이블에서 이름의 두 번째 글자가 ‘A’ 인 사원이름, 급여, 업무 조회한다.
SELECT ename , sal, job
FROM EMP
where ename like '_A%';

문> EMP 테이블에서 이름이 ‘A’로 시작하는  사원이름, 급여, 업무 조회한다.
SELECT ename , sal, job
FROM EMP
where ename like 'A%'; 

문>  EMP 테이블에서 이름에 ‘A’ 문자가 포함된 사원이름, 급여, 업무 조회한다.
SELECT ename , sal, job
FROM EMP
where ename like '%A%'; 

문>  EMP 테이블에서 이름에 ‘N’ 문자로 끝나는 사원이름, 급여, 업무 조회한다.
SELECT ename , sal, job
FROM EMP
where ename like '%N'; 


문> emp테이블에서 commission을 받지 않는 사원 정보 조회 (값이 존재하지 않는, null인 사원)
select empno, ename, sal, comm, job, deptno
from emp
where comm == null; ----? error

select empno, ename, sal, comm, job, deptno
from emp
where comm is null; 
#null을 비교하는 연산자는 is null, is not null

문> emp테이블에서 commission을 받는 사원 정보 조회 (값이 존재, null이 아닌)
select empno, ename, sal, comm, job, deptno
from emp
where comm is not null; 

select empno, ename, sal, comm, job, deptno
from emp
where comm >= 0;

#논리연산자 : not, and, or
not in ~
not between ~ and ~
not like ~
is not null


#연산자 우선 순위 
interval
binary, collate 
!
~, 
^
산술연산자  (/, div,  %, mod, *, +, -)
<<, >>
&, |
비교연산자 (...IS, LIKE, IN, regexp)
[not] betwee~and
 not
 and, &&
 or , ||
[select  변수 := 값]


select  ~~~~~
from ~~~
[where 조건  ---필터조건]
[order by 컬럼 정렬방식, 컬럼 정렬방식, ..] 

# 정렬방식을 생략하면 asc(오름차순)으로 정렬됨
  desc (내림차순)

문> EMP 테이블에서 입사일자가 빠른 사원이 먼저 나오도록 정렬하여 사원번호, 이름, 업무, 급여, 입사일자, 부서번호를 조회한다
SELECT ename, empno, job, sal, hiredate, deptno
           FROM EMP
          ORDER BY  hiredate  desc;

문> EMP 테이블에서 부서번호로 오름차순 정렬한 후 부서번호가 같을 경우 급여가 많은 순으로 정렬하여 사원번호, 성명, 업무, 부서번호, 급여를 출력하여라.
SELECT ename, empno, job, sal, hiredate, deptno
           FROM EMP
          ORDER BY  deptno , sal  desc;

Quiz>  SELECT ename, sal, sal*12 "Annual Salary"
           FROM EMP
          ORDER BY  sal*12  desc;  ---표현식 가능 

          SELECT ename, sal, sal*12 "Annual Salary"
           FROM EMP
         ORDER BY  "Annual Salary" desc ;  ---Alias  가능 

 SELECT empno, ename, job, deptno, sal
 FROM EMP
 ORDER BY 4 , 5  desc ; --4, 5는 select절에 선언된 column position값  가능?
